{"version":3,"file":"glaive.js","sources":["../lib/isType.js","../lib/sleep.js","../lib/allot.js","../src/Injector.js","../src/Module.js","../src/Decorator.js","../src/index.js"],"sourcesContent":["export default new Proxy(\n  {},\n  {\n    get: (target, name) => value => {\n      const type = value::Object.prototype.toString().slice(8, -1)\n      return type[0].toLowerCase() + type.slice(1) === name\n    }\n  },\n)\n","export default async time => {\n  return await new Promise(resolve => {\n    if (!time) {\n      resolve(true)\n    } else {\n      setTimeout(() => resolve(true), time)\n    }\n  })\n}\n","export const prefix = \"_\"\nexport default function(config = {}) {\n  Object.entries(config)\n    .filter(([key]) => key !== \"allotParams\" && key !== \"complete\")\n    .map(([key, value]) => {\n      this[`${prefix}${key}`] = value\n    })\n  return this\n}\n","import is from \"../lib/isType\"\nimport sleep from \"../lib/sleep\"\nimport allot, { prefix } from \"../lib/allot\"\n\nexport default class Injector {\n  constructor(config = {}) {\n    const { allotParams = this._allotParams } = config\n    if (is.Function(allotParams)) {\n      ;this::allotParams(config)\n    } else {\n      throw new Error(`\\'allotParams\\' must be a function.`)\n    }\n    this._modules = new Map()\n    this._queueModules = new Set()\n    this._bootstrap(config).then(this::this._complete)\n  }\n\n  _allotParams(config) {\n    return this::allot(config)\n  }\n\n  _complete({ done }) {\n    this.initiated = true\n    is.function(done) && done(this.initiated)\n  }\n\n  _merge(modules) {\n    let dependenceMap = []\n    modules.forEach(({ injectors } = {}, moduleName) => {\n      const dependence = injectors.reduce((pre, { deps = [] }) => {\n        return [...new Set(pre.concat(deps))]\n      }, [])\n      dependenceMap.push({\n        moduleName,\n        dependence,\n      })\n    })\n    return dependenceMap\n  }\n\n  _queue(modules = [], list) {\n    let restModules = []\n    modules.map(({ moduleName, dependence = [] } = {}) => {\n      const isNoneDependence = dependence.length === 0\n      const rest = [...new Set(dependence.concat([...list]))].filter(\n        item => ![...list].includes(item),\n      )\n      const isDepended = rest.length === 0\n      if (isNoneDependence || isDepended) {\n        list.add(moduleName)\n      } else {\n        restModules.push({ moduleName, dependence })\n      }\n    })\n    if (restModules.length > 0) {\n      this._queue(restModules, list)\n    }\n  }\n\n  _initialize() {\n    const dependenceMap = this._merge(this._modules)\n    this._queue(dependenceMap, this._queueModules)\n    this._queueModules.forEach(moduleName => {\n      const { Module, parameters } = this._modules.get(moduleName)\n\n      this[moduleName] = new Module(parameters)\n    })\n    ;this::this.distribute(dependenceMap)\n    return this\n  }\n\n  async _bootstrap(config) {\n    await sleep()\n    try {\n      let queueModules = [...this._queueModules]\n      while (queueModules.length > 0) {\n        const moduleName = queueModules.shift()\n        const current = this._modules.get(moduleName)\n        const isAsync = is.asyncFunction(this[moduleName].initialize)\n        const injectors = [...current.injectors]\n        let beforeInjectors = injectors.filter(({ before }) => before)\n        while (beforeInjectors.length > 0) {\n          let unprocessed\n          const { before, deps } = beforeInjectors.shift()\n          const isAsyncAction = is.asyncFunction(before)\n          const args = deps.map(dep => this[dep])\n          if (isAsyncAction) {\n            unprocessed = await before(...args, this[moduleName])\n          } else {\n            unprocessed = before(...args, this[moduleName])\n          }\n        }\n        if (isAsync) {\n          await this[moduleName].initialize()\n        } else {\n          if (is.Function(this[moduleName].initialize)) {\n            this[moduleName].initialize()\n          }\n        }\n        let afterInjectors = injectors.filter(({ after }) => after)\n        while (afterInjectors.length > 0) {\n          let processed\n          const { after, deps } = afterInjectors.shift()\n          const isAsyncAction = is.asyncFunction(after)\n          const args = deps.map(dep => this[dep])\n          if (isAsyncAction) {\n            processed = await after(...args, this[moduleName])\n          } else {\n            processed = after(...args, this[moduleName])\n          }\n        }\n      }\n    } catch (e) {\n      throw new Error(`Injector failed to boot up. `)\n    }\n    return config\n  }\n\n  inject(models) {\n    models.map(({ module, deps = [], params = {}, before, after } = {}) => {\n      const { name, _injectors = [] } = module\n      const { parameters = params, injectors = _injectors } =\n        this._modules.get(name) || {}\n      this._modules.set(name, {\n        Module: module,\n        parameters: Object.assign(parameters, params),\n        injectors: [...injectors, { deps, before, after }],\n      })\n    })\n    this._initialize()\n    return this\n  }\n\n  distribute(dependenceMap) {\n    dependenceMap.map(({ moduleName, dependence }) => {\n      dependence.map(name => {\n        this[moduleName][`${prefix}${name}`] = this[moduleName]\n      })\n    })\n    return this\n  }\n}\n","import is from \"../lib/isType\"\nimport allot from \"../lib/allot\"\n\nexport default class Module {\n  constructor(args) {\n    const isFunction = is.function(this._allotParams)\n    if (isFunction) {\n      this._allotParams(args)\n    } else {\n      throw new Error('\"_allotParams\" must be a function')\n    }\n  }\n\n  _allotParams(config) {\n    return this::allot(config)\n  }\n}\n","export default (dependencies = {}) => target => {\n  target._injectors = [...(target._injectors || []), dependencies]\n}\n\n// export const prefix = '$$'\n// export const allot = (target, key, descriptor) => {\n//   const method = descriptor.value\n//   const allotParams = function(config = {}) {\n//     Object.entries(config)\n//       .filter(([key]) => key !== 'allotParams' && key !== 'complete')\n//       .map(([key, value]) => {\n//         console.log(key)\n//         this[`${prefix}${key}`] = value\n//       })\n//   }\n//   descriptor.value = (...args) => {\n//     const [config] = args\n//     return target::allotParams(config)\n//   }\n//   return descriptor\n// }\n","import Injector from \"./Injector\"\nimport Module from \"./Module\"\nimport Decorator from \"./Decorator\"\n\nexport default {\n  Injector,\n  Module,\n  Decorator,\n}\n\nexport { Injector, Module, Decorator }\n"],"names":["Proxy","target","name","type","Object","prototype","toString","slice","toLowerCase","time","Promise","resolve","prefix","config","entries","filter","key","map","value","Injector","allotParams","_allotParams","is","Function","Error","_modules","Map","_queueModules","Set","_bootstrap","then","_complete","allot","done","initiated","function","modules","dependenceMap","forEach","injectors","moduleName","dependence","reduce","pre","deps","concat","push","list","restModules","isNoneDependence","length","rest","includes","item","isDepended","add","_queue","_merge","get","Module","parameters","distribute","sleep","queueModules","shift","current","isAsync","asyncFunction","initialize","beforeInjectors","before","unprocessed","isAsyncAction","args","dep","afterInjectors","after","processed","e","models","module","params","_injectors","set","assign","_initialize","isFunction","dependencies"],"mappings":"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"}