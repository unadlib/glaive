!(function(a, b) {
  typeof exports === "object" && typeof module !== "undefined"
    ? (module.exports = b())
    : typeof define === "function" && define.amd ? define(b) : (a.glaive = b())
})(this, function() {
  "use strict"
  var a = new Proxy(
      {},
      {
        get: function c(a, b) {
          return function(a) {
            return Object.prototype.toString.call(a) === "[object " + b + "]"
          }
        },
      },
    ),
    c = function(a, b) {
      if (!(a instanceof b)) {
        throw new TypeError("Cannot call a class as a function")
      }
    },
    d = (function() {
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c]
          d.enumerable = d.enumerable || !1
          d.configurable = !0
          "value" in d && (d.writable = !0)
          Object.defineProperty(a, d.key, d)
        }
      }
      return function(b, c, d) {
        c && a(b.prototype, c)
        d && a(b, d)
        return b
      }
    })(),
    e = function(a) {
      if (Array.isArray(a)) {
        for (var b = 0, c = Array(a.length); b < a.length; b++) c[b] = a[b]
        return c
      } else {
        return Array.from(a)
      }
    },
    f = (function() {
      function b(a) {
        c(this, b)
        this._config = a
        this._modules = []
        this._module = {}
        this.initialize()
        this.bootstrap().then()
      }
      d(b, [
        {
          key: "_queue",
          value: function c(a, b) {
            var d = []
            a.map(function(a) {
              var c = a.moduleName,
                f = a.dependence,
                g = f === undefined ? [] : f,
                h = g.length === 0,
                i = [].concat(e(new Set(g.concat(b)))).filter(function(a) {
                  return !b.includes(a)
                }),
                j = i.length === 0
              h || j ? b.push(c) : d.push({ moduleName: c, dependence: g })
            })
            d.length > 0 && this._queue(d, b)
          },
        },
        {
          key: "_filter",
          value: function d(a, b, c) {
            return b
              .map(function(b, c) {
                return { moduleName: b, module: a[c] }
              })
              .filter(function(a) {
                var b = a.moduleName
                return c.includes(b)
              })
              .map(function(a) {
                var b = a.module
                return b
              })
          },
        },
        {
          key: "initialize",
          value: function a() {
            throw new Error(
              "Please set initialization Dependency Injection configuration.",
            )
          },
        },
        {
          key: "inject",
          value: function c(b) {
            var d = this,
              f =
                arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : [],
              g = arguments[2],
              h = b.name,
              i = b._dependencies || [],
              j = [].concat(e(new Set(i.concat(f)))),
              k = async function c() {
                for (var h = arguments.length, k = Array(h), l = 0; l < h; l++)
                  k[l] = arguments[l]
                var m = a.AsyncFunction(b._callback) || a.Promise(b._callback),
                  n = a.AsyncFunction(g) || a.Promise(g),
                  o =
                    a.AsyncFunction(b.prototype.initialize) ||
                    a.Promise(b.prototype.initialize),
                  p = void 0
                m
                  ? await b._callback.apply(b, e(d._filter(k, j, i)))
                  : b._callback && b._callback.apply(b, e(d._filter(k, j, i)))
                o
                  ? (p = await new Promise(function(a) {
                      return new b({ initCallback: a })
                    }))
                  : (p = new b())
                d.injector(p, j, k)
                n
                  ? await g.apply(undefined, e(d._filter(k, j, f)).concat([p]))
                  : g && g.apply(undefined, e(d._filter(k, j, f)).concat([p]))
                return p
              }
            this._modules.push({ moduleName: h, dependence: j, initialize: k })
            this._module[h] = b
            return this
          },
        },
        {
          key: "injector",
          value: function d(a, b, c) {
            b.map(function(b, d) {
              a["_" + b.toLocaleLowerCase()] = c[d]
            })
          },
        },
        {
          key: "bootstrap",
          value: async function b() {
            var c = this,
              d = []
            this._queue(this._modules, d)
            for (var f = 0; f < d.length; f++) {
              for (var g = 0; g < this._modules.length; g++) {
                var h = d[f],
                  i = this._modules[g],
                  j = i.moduleName === h,
                  k = i.dependence.map(function(a) {
                    return c[a]
                  })
                if (j) {
                  var l =
                    a.AsyncFunction(i.initialize) || a.Promise(i.initialize)
                  l
                    ? (this[h] = await i.initialize.apply(i, e(k)))
                    : (this[h] = i.initialize.apply(i, e(k)))
                }
              }
            }
            return this
          },
        },
      ])
      return b
    })(),
    g = (function() {
      function a() {
        c(this, a)
        this.initialize.apply(this, arguments)
      }
      d(a, [
        {
          key: "initialize",
          value: function a() {
            var b =
                arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : {},
              c = b.initCallBack,
              d = c === undefined ? function() {} : c,
              e = d || this._initCallBack
            if (typeof d !== "function") {
              throw new Error('"initCallBack" must be a function')
            }
            return e(this)
          },
        },
        {
          key: "_initCallBack",
          value: function a() {
            return this
          },
        },
      ])
      return a
    })(),
    h = { DI: f, Module: g }
  return h
})
//# sourceMappingURL=glaive.min.js.map
