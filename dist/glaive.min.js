!(function(a, b) {
  typeof exports === "object" && typeof module !== "undefined"
    ? b(exports)
    : typeof define === "function" && define.amd
      ? define(["exports"], b)
      : b((a.glaive = {}))
})(this, function(a) {
  "use strict"
  var b = new Proxy(
      {},
      {
        get: function c(a, b) {
          return function(a) {
            var c = Object.prototype.toString.call(a).slice(8, -1)
            return c[0].toLowerCase() + c.slice(1) === b
          }
        },
      },
    ),
    c = async function(a) {
      return await new Promise(function(b) {
        a
          ? setTimeout(function() {
              return b(!0)
            }, a)
          : b(!0)
      })
    },
    f = function(a, b) {
      if (!(a instanceof b)) {
        throw new TypeError("Cannot call a class as a function")
      }
    },
    g = (function() {
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c]
          d.enumerable = d.enumerable || !1
          d.configurable = !0
          "value" in d && (d.writable = !0)
          Object.defineProperty(a, d.key, d)
        }
      }
      return function(b, c, d) {
        c && a(b.prototype, c)
        d && a(b, d)
        return b
      }
    })(),
    h = function(a, b) {
      if (typeof b !== "function" && b !== null) {
        throw new TypeError(
          "Super expression must either be null or a function, not " + typeof b,
        )
      }
      a.prototype = Object.create(b && b.prototype, {
        constructor: {
          value: a,
          enumerable: !1,
          writable: !0,
          configurable: !0,
        },
      })
      b &&
        (Object.setPrototypeOf
          ? Object.setPrototypeOf(a, b)
          : (a.__proto__ = b))
    },
    j = function(a, b) {
      if (!a) {
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called",
        )
      }
      return b && (typeof b === "object" || typeof b === "function") ? b : a
    },
    k = (function() {
      function a(a, b) {
        var c = [],
          d = !0,
          e = !1,
          f = undefined
        try {
          for (
            var g = a[Symbol.iterator](), h;
            !(d = (h = g.next()).done);
            d = !0
          ) {
            c.push(h.value)
            if (b && c.length === b) break
          }
        } catch (a) {
          ;(e = !0), (f = a)
        } finally {
          try {
            !d && g["return"] && g["return"]()
          } finally {
            if (e) throw f
          }
        }
        return c
      }
      return function(b, c) {
        if (Array.isArray(b)) {
          return b
        } else if (Symbol.iterator in Object(b)) {
          return a(b, c)
        } else {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance",
          )
        }
      }
    })(),
    l = function(a) {
      if (Array.isArray(a)) {
        for (var b = 0, c = Array(a.length); b < a.length; b++) c[b] = a[b]
        return c
      } else {
        return Array.from(a)
      }
    },
    m = "_",
    n = function() {
      var a = this,
        b =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
      Object.entries(b)
        .filter(function(a) {
          var b = k(a, 1),
            c = b[0]
          return c !== "allotParams" && c !== "complete"
        })
        .map(function(b) {
          var c = k(b, 2),
            d = c[0],
            e = c[1]
          a["" + m + d] = e
        })
      return this
    },
    o = {
      allotParams: "'allotParams' must be a function",
      boot: "`Injector failed to boot up `",
      module: "'module' must be a function or class",
    },
    p = new Proxy(
      {},
      {
        get: function c(a, b) {
          return function(a) {
            return o[b] || a + " Error"
          }
        },
      },
    ),
    q = new Proxy(
      {},
      {
        get: function c(a, b) {
          return function(a) {
            throw new Error(p[b](a))
          }
        },
      },
    ),
    r = new Proxy(
      {},
      {
        get: function c(a, b) {
          return new Map(
            ["initial", "initialized", "booting", "ready"].map(function(a) {
              return [a, a]
            }),
          ).get(b)
        },
      },
    ),
    s = function() {
      var a =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : (function() {
              function a() {
                f(this, a)
              }
              return a
            })()
      return (function(a) {
        h(d, a)
        function d() {
          var a =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {}
          f(this, d)
          var c = j(
              this,
              (d.__proto__ || Object.getPrototypeOf(d)).call(this, a),
            ),
            e = a.allotParams,
            g = e === undefined ? c._allotParams : e
          b.function(g) ? g.call(c, a) : q.allotParams()
          c._modules = new Map()
          c._queueModules = new Set()
          c._loadModulesHistory = new Set()
          c._bootstrap(a).then(c._complete.bind(c))
          return c
        }
        g(d, [
          {
            key: "_allotParams",
            value: function b(a) {
              return n.call(this, a)
            },
          },
          {
            key: "_complete",
            value: function c(a) {
              var d = a.done
              this.initiated = !0
              return b.function(d) && d(this.initiated)
            },
          },
          {
            key: "_merge",
            value: function b(a) {
              var c = []
              a.forEach(function() {
                var a =
                    arguments.length > 0 && arguments[0] !== undefined
                      ? arguments[0]
                      : {},
                  b = a.injectors,
                  d = arguments[1],
                  e = b.reduce(function(a, b) {
                    var c = b.deps,
                      d = c === undefined ? [] : c
                    return [].concat(l(new Set(a.concat(d))))
                  }, [])
                c.push({ moduleName: d, dependence: e })
              })
              return c
            },
          },
          {
            key: "_queue",
            value: function a() {
              var b =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : [],
                c = arguments[1],
                d = []
              b.map(function() {
                var a =
                    arguments.length > 0 && arguments[0] !== undefined
                      ? arguments[0]
                      : {},
                  b = a.moduleName,
                  e = a.dependence,
                  f = e === undefined ? [] : e,
                  g = f.length === 0,
                  h = []
                    .concat(l(new Set(f.concat([].concat(l(c))))))
                    .filter(function(a) {
                      return ![].concat(l(c)).includes(a)
                    }),
                  i = h.length === 0
                g || i ? c.add(b) : d.push({ moduleName: b, dependence: f })
              })
              d.length > 0 && this._queue(d, c)
            },
          },
          {
            key: "_initialize",
            value: function b(a) {
              var c = this,
                d = this._merge(this._modules)
              this._queue(d, this._queueModules)
              this._queueModules.forEach(function(b) {
                var d = c._modules.get(b),
                  e = d.Module,
                  f = d.parameters,
                  g = d.moduleKey,
                  h = d.injectors
                if (a) {
                  var i = new Set(
                      h.reduce(function(a, b) {
                        var c = b.deps,
                          d = c === undefined ? [] : c
                        return [].concat(l(a), l(d))
                      }, []),
                    ),
                    j = {}
                  i.forEach(function(a) {
                    var b = c._modules.get(a),
                      d = b.moduleKey
                    j[d] = c[d]
                  })
                  Object.assign(f, j)
                }
                c[g] = new e(f)
                c.mountParams(g)
                c[g].__status = r.initialized
              })
              this.distribute.call(this, d)
              return this
            },
          },
          {
            key: "_insureUnique",
            value: function a() {
              var c = this,
                d = [].concat(l(this._loadModulesHistory)).slice(0, -1)
              d.forEach(function() {
                var a =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : []
                return a.forEach(function(a) {
                  var d = a.key,
                    e = a.module,
                    f =
                      c._modules.get(e.prototype.constructor.name).moduleKey !==
                      d
                  !b.null(d) &&
                    !b.undefined(d) &&
                    f &&
                    Reflect.deleteProperty(c, d)
                })
              })
            },
          },
          {
            key: "mountParams",
            value: function a() {
              return this
            },
          },
          {
            key: "inject",
            value: function c(a) {
              var d = this,
                e =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : {},
                f = e.preInject,
                g = e.preDistribute
              f && f.call(this)
              a.map(function() {
                var a =
                    arguments.length > 0 && arguments[0] !== undefined
                      ? arguments[0]
                      : {},
                  c = a.module,
                  e = a.deps,
                  f = e === undefined ? [] : e,
                  g = a.params,
                  h = g === undefined ? {} : g,
                  i = a.key,
                  j = a.before,
                  k = a.after
                if (!b.function(c)) {
                  return q.module()
                }
                var m = c.prototype.constructor.name,
                  n = c._key,
                  o = n === undefined ? m : n,
                  p = c._injectors,
                  r = p === undefined ? [] : p,
                  s = i || o,
                  t = d._modules.get(m),
                  u = t || {},
                  v = u.parameters,
                  w = v === undefined ? h : v,
                  x = u.injectors,
                  y = x === undefined ? r : x,
                  z = {}
                t &&
                  (z = {
                    parameters: h,
                    injectors: [].concat(l(r), [
                      { deps: f, before: j, after: k },
                    ]),
                  })
                d._modules.set(
                  m,
                  Object.assign(
                    {
                      Module: c,
                      moduleKey: s[0].toLowerCase() + s.slice(1),
                      parameters: Object.assign(w, h),
                      injectors: [].concat(l(y), [
                        { deps: f, before: j, after: k },
                      ]),
                    },
                    z,
                  ),
                )
              })
              this._loadModulesHistory.add(a)
              this._initialize(g)
              return this
            },
          },
          {
            key: "distribute",
            value: function b(a) {
              var c = this
              a.map(function(a) {
                var b = a.moduleName,
                  d = a.dependence
                d.map(function(a) {
                  var d = c._modules.get(b),
                    e = d.moduleKey,
                    f = c._modules.get(a)
                  c[e]["" + m + f.moduleKey] = c[f.moduleKey]
                })
              })
              return this
            },
          },
          {
            key: "_bootstrap",
            value: async function d(a) {
              var f = this
              await c()
              this._insureUnique()
              try {
                var g = [].concat(l(this._queueModules))
                while (g.length > 0) {
                  var h = g.shift(),
                    i = this._modules.get(h),
                    j = i.injectors,
                    k = i.moduleKey
                  if (!this[k]) {
                    q.throw(k)
                    continue
                  }
                  var m = b.asyncFunction(this[k].initialize),
                    n = [].concat(l(j))
                  this[k].__status = r.booting
                  var o = n.filter(function(a) {
                    var b = a.before
                    return b
                  })
                  while (o.length > 0) {
                    var p = void 0,
                      s = o.shift(),
                      t = s.before,
                      u = s.deps,
                      v = b.asyncFunction(t),
                      w = u.map(function(a) {
                        return f[f._modules.get(a).moduleKey]
                      })
                    v
                      ? (p = await t.apply(undefined, l(w).concat([this[k]])))
                      : (p = t.apply(undefined, l(w).concat([this[k]])))
                  }
                  m
                    ? await this[k].initialize()
                    : b.function(this[k].initialize) && this[k].initialize()
                  var x = n.filter(function(a) {
                    var b = a.after
                    return b
                  })
                  while (x.length > 0) {
                    var y = void 0,
                      z = x.shift(),
                      A = z.after,
                      u = z.deps,
                      B = b.asyncFunction(A),
                      C = u.map(function(a) {
                        return f[f._modules.get(a).moduleKey]
                      })
                    B
                      ? (y = await A.apply(undefined, l(C).concat([this[k]])))
                      : (y = A.apply(undefined, l(C).concat([this[k]])))
                  }
                  this[k].__status = r.ready
                }
              } catch (a) {
                console.log(a), q.boot()
              }
              return a
            },
          },
        ])
        return d
      })(a)
    },
    t = (function() {
      function a(c) {
        f(this, a)
        var d = b.function(this._allotParams)
        d ? this._allotParams(c) : q.allotParams()
        this.__status = r.initial
      }
      g(a, [
        {
          key: "_allotParams",
          value: function b(a) {
            return n.call(this, a)
          },
        },
      ])
      return a
    })(),
    u = function() {
      var a =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
      return function(b) {
        b._injectors = [].concat(l(b._injectors || []), [a])
        a.key && (b._key = a.key)
      }
    },
    v = { Injector: s, Module: t, Decorator: u }
  a["default"] = v
  a.Injector = s
  a.Module = t
  a.Decorator = u
  Object.defineProperty(a, "__esModule", { value: !0 })
})
//# sourceMappingURL=glaive.min.js.map
